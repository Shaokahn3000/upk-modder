#summary Features of the UPKmodder tool

= Introduction =

This page provides a general overview of the features in the UPKmodder tool.

[https://upk-modder.googlecode.com/svn/wiki/images/UPK_modder_v0_65_marked_up.png]

= Details =

UPKmodder provides the following :
  * The project pane, on the left-hand side
    * Multiple projects can be open and are denoted *bold*
    * Projects may have subfolders, as well as mod_files
    * Projects are essentially a mapping to a directory on disc, so changes to the folder will be reflected in the Project view once it refreshes

  * Each open modfile has a separate tab and is divided into 2 sub-panes
    * The main editor on the left hand side, which is open by default
      * The main editor provides highlighting of parseable unreal bytecode and is otherwise a general-purpose text editor
    * The tree view on the right-hand side, which is closed by default
      * Does not provide editing capability
      * Allows viewing of parsed unreal bytecode in a hierarchical fashion
      * Shows memory / file positions for each line
      * Shows memory sizes of each unreal token when line is expanded
      * Shows operand name and reference names when target upk is selected

File Actions :
  * Project Actions
    * New Project
    * Open Project
    * Close Project
  * ModFile Actions
    * New File
      * Creates a new modfile using the template file 'defaultModfileTemplate.upk_mod'
    * Open File
      * File can also be opened by double-clicking on the file in the Project pane
    * Close File
    * Close All
    * Save
      * Save the active modfile
    * Save as
      * Save a copy of the active modfile 
    * Export
      * Not implemented as of v0.65 

Edit Actions :
  * Update References
    * Can also be accessed from the toolbar
    * Opens the Update References dialogue
    * Provides capability to update a modfile from one game version to another (i.e. fixing after patches)
  * Apply Hex Changes
    * Can also be accessed from the toolbar
    * Attempts to apply changes in the active ModFile to the targeted upk for that ModFile
      * Searches for BEFORE hex and replaces them with AFTER hex
    * If successful ModFile name will be displayed in _*Blue*_ italics (this means that the upk is modded)
    * If unsuccessful the Logger will contain info detailing why the application failed
  * Revert Hex Changes
    * Can also be accessed from the toolbar
    * Similar to apply, but searches for AFTER and replaces it with BEFORE
    * If successful the ModFile name will be displayed in *Green* non-italics (this means that the upk is restored to original state)

Other actions :
  * Set target upk
    * Accessed in lower left status bar by clicking on folder icon
    * Target upk performs the following roles :
      * Is the upk that apply and revert actions affect
      * Is the upk that reference names are drawn from in the Tree View

  * View log
    * The log is accessed via the button in the lower right corner of the status bar
    * Provides additional information about actions performed, including errors and timing information

= Installation =
  * Install anywhere.

  * Adjust the _UPKmodder v0.65\Config\upk_config.ini_ to reflect location and GUID of some local UPK's.

  * Run *UPKmodder.jar* and to start a new Project.

= Usage =
Included are a few sample projects in the distribution (they should be in the _UPKmodderProjects_ subfolder within the decompressed folder).

You should be able to open the project files (which are the *.xml* files in the projects' folder) -- for example _UPKmodderProjects\Expanded Perk Tree EW\*Expanded Perk Tree EW.xml*_. From there you can open individual modfiles by double-clicking on the file in the project pane. Alternatively you can directly open a sample modfile with the "*Open File...*" menu item.

This will let you look at a variety of sample *upk_mod* files (most of which are full function replacements).

There are some definite usability improvements we're still trying to make. The projects pane isn't as useful as it could be, for example. And associating target UPKs is still a file-by-file basis, which is a bit cumbersome.

When I'm creating a new modfile, I typically start off by copying the header from another function and then modifying it as necessary. I then open the function I'm going to change in [http://eliotvu.com/portfolio/view/21/ue-explorer UE Explorer]'s Token view, copy the data into a temporary text editor document (I use [http://notepad-plus-plus.org/ Notepad++]) and use a macro to reformat it into something more readable by *UPKmodder* (stripping out the leading/trailing stuff around the hex, and the internal memory positions). I then copy the code into the _CODE_ block in the _BEFORE_ section. This triggers the limited parser in *UPKmodder*, which will color code the various hex parts accordingly, so I can double check that things are working as expected. I then fill out the memory/file positions (either directly from *UE Explore*'s buffer view or from the *UPKmodder* tree view)

The next steps involve either doing another copy/paste of the hex into the _AFTER / CODE_ section (if I'm primarly making modifications), using updated code from a previous version mod that I'm trying to fix up, or writing entirely new code, depending on the particulars.