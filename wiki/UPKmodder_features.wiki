#summary Features of the UPKmodder tool

= Introduction =

This page provides a general overview of the features in the UPKmodder tool.

[https://upk-modder.googlecode.com/svn/wiki/images/UPK_modder_v0_65_marked_up.png]

= Details =

UPKmodder provides the following :
  * The project pane, on the left-hand side
    * Multiple projects can be open and are denoted *bold*
    * Projects may have subfolders, as well as mod_files
    * Projects are essentially a mapping to a directory on disc, so changes to the folder will be reflected in the Project view once it refreshes

  * Each open modfile has a separate tab and is divided into 2 sub-panes
    * The main editor on the left hand side, which is open by default
      * The main editor provides highlighting of parseable unreal bytecode and is otherwise a general-purpose text editor
    * The tree view on the right-hand side, which is closed by default
      * Does not provide editing capability
      * Allows viewing of parsed unreal bytecode in a hierarchical fashion
      * Shows memory / file positions for each line
      * Shows memory sizes of each unreal token when line is expanded
      * Shows operand name and reference names when target upk is selected

File Actions :
  * Project Actions
    * New Project
    * Open Project
    * Close Project
  * ModFile Actions
    * New File
      * Creates a new modfile using the template file 'defaultModfileTemplate.upk_mod'
    * Open File
      * File can also be opened by double-clicking on the file in the Project pane
    * Close File
    * Close All
    * Save
      * Save the active modfile
    * Save as
      * Save a copy of the active modfile 
    * Export
      * Not implemented as of v0.65 

Edit Actions :
  * Update References
    * Can also be accessed from the toolbar
    * Opens the Update References dialogue
    * Provides capability to update a modfile from one game version to another (i.e. fixing after patches)
  * Apply Hex Changes
    * Can also be accessed from the toolbar
    * Attempts to apply changes in the active ModFile to the targeted upk for that ModFile
      * Searches for BEFORE hex and replaces them with AFTER hex
    * If successful ModFile name will be displayed in _*Blue*_ italics (this means that the upk is modded)
    * If unsuccessful the Logger will contain info detailing why the application failed
  * Revert Hex Changes
    * Can also be accessed from the toolbar
    * Similar to apply, but searches for AFTER and replaces it with BEFORE
    * If successful the ModFile name will be displayed in *Green* non-italics (this means that the upk is restored to original state)

Other actions :
  * Set target upk
    * Accessed in lower left status bar by clicking on folder icon
    * Target upk performs the following roles :
      * Is the upk that apply and revert actions affect
      * Is the upk that reference names are drawn from in the Tree View

  * View log
    * The log is accessed via the button in the lower right corner of the status bar
    * Provides additional information about actions performed, including errors and timing information

= Installation =
  * Install anywhere.

  * Adjust the _UPKmodder v0.65\Config\upk_config.ini_ to reflect location and GUID of some local UPK's.

  * Run *UPKmodder.jar* and to start a new Project.

= Usage =
Included are a few sample projects in the distribution (they should be in the _UPKmodderProjects_ subfolder within the decompressed folder).

You should be able to open the project files (which are the *.xml* files in the projects' folder) -- for example _UPKmodderProjects\Expanded Perk Tree EW\*Expanded Perk Tree EW.xml*_. From there you can open individual modfiles by double-clicking on the file in the project pane. Alternatively you can directly open a sample modfile with the "*Open File...*" menu item.

This will let you look at a variety of sample *upk_mod* files (most of which are full function replacements).

There are some definite usability improvements we're still trying to make. The projects pane isn't as useful as it could be, for example. And associating target UPKs is still a file-by-file basis, which is a bit cumbersome.

When I'm creating a new modfile, I typically start off by copying the header from another function and then modifying it as necessary. I then open the function I'm going to change in [http://eliotvu.com/portfolio/view/21/ue-explorer UE Explorer]'s Token view, copy the data into a temporary text editor document (I use [http://notepad-plus-plus.org/ Notepad++]) and use a macro to reformat it into something more readable by *UPKmodder* (stripping out the leading/trailing stuff around the hex, and the internal memory positions). I then copy the code into the _CODE_ block in the _BEFORE_ section. This triggers the limited parser in *UPKmodder*, which will color code the various hex parts accordingly, so I can double check that things are working as expected. I then fill out the memory/file positions (either directly from *UE Explore*'s buffer view or from the *UPKmodder* tree view)

The next steps involve either doing another copy/paste of the hex into the _AFTER / CODE_ section (if I'm primarly making modifications), using updated code from a previous version mod that I'm trying to fix up, or writing entirely new code, depending on the particulars.

= Application =
To apply a *UPK Modfile*:
 # Decompress your UPK files using [http://www.gildor.org/downloads Gildor's Decompress tool] -- UPKmodder doesn't do anything or know anything about this (alternately ToolBoks will auto-decompress the UPKs and clean up the CookedPCConsole when launched).
 # Open UPKmodder and create a new _Project_.
 # Create a new file within the _Project_, paste the contents of your modfile into the new _Project_ file.
 # Repeat step 3 for each modfile to be included in the Project.
 # Set up the target UPKs for the project using the control in the lower left (click on the folder icon to bring up a chooser) -- select the appropriate UPK.
 # Perform step 5 for each type of UPK (i.e. *XComStrategyGame.upk* and *XComGame.upk*) - the project stores the links from the "UPKFILE=" line in the _Project_ file and will automatically set the targets after that.
 # Test the status of the UPK_mod files, either by right-clicking the _Project_ and selecting "test status" or performing it for each file individually (_*green*_ = BEFORE, _*blue*_ = AFTER, _*red*_ = ERROR).
 # All files should show as _*green*_ (unless you've already modded the UPK in same way).
 # Open each file and select the "Apply" button -- if successful the color should change to _*blue*_.
 # Launch the game.

= FAQ =
(as of version 0.81)

Q&A: The "upk_config.ini" is obsolete.  Just ignore it.

Q:  To replace old code by copy/paste: you need to delete it first, then paste a new code. Replacing selected text with text from clipboard doesn't work.  

A: This appears to be a limitation of the built-in "DefaultStyledEditor" in Java, which was used instead of re-inventing that particular wheel.

Q: For Update References to work properly I needed to lookup/convert source references first, then close the dialog, re-open it and lookup/convert destination references. If I try to lookup/convert destination references right after lookup/convert source references nothing happens.

A: Are you converting to names as an intermediate step? The name conversion is more intended as a step for handling cases were some of the symbols don't match from one version to another. My usual steps are :
  # Look up Source References
  # Look up Destination References
  # If everything mapped then the "Convert Source Refs to Dest Refs" button will activate, which directly converts the numerical source refs to dest refs.
  However, if one of the intermediate names doesn't map to a destination reference (like in one function where Firaxis renamed a field _*c*_lassName to _*C*_lassName), then that button doesn't activate, since doing such a conversion would result in a file with references to two different versions of UPK and no way to tell them apart.
  To handle that case is what I added the "Convert Hex References to Names" button for. It's there to convert everything to a name. It is a bit glitchy that you have to close and re-open the dialogue, but if you do so you can then convert the names that do match to dest refs back to references values, leaving just the names that didn't map to deal with manually.

Q: Converting destination references updates the GUID, but it doesn't updates the UPKFILE path.

A: That's a good point. I guess I assumed that the "UPKFILE=`<tag>`" wouldn't be changing. Behind the scenes it's a fully pathed filename, but I could extract the upk name and replace it if necessary.

Q: At some point GUID wasn't updated after updating destination references. That was my first attempt to work with this feature, so I messed up some things. After I learned how it works, I see GUID updated each time I convert destination references (but, again, UPKFILE is not updated).

A: I think if you convert to names the GUID is changed to "None", since a file with all names isn't necessarily tied (in the way numerical references are) to a particular version. Any time you convert to destination references it should be updating the GUID.
  I should also point out that the smallest unit for conversion is a single line, so it's quite possible to copy lines to another file and therefore convert a file "piecemeal". I sometimes do this when some lines don't convert properly.

Q: Code structure sometimes get messed up after references conversion: end of line gets "eaten", so some lines get merged into one. I suspect it can be related to different end of line standards: 0x0A without 0x0D or 0x0D followed by 0x0A.

A: I think the issue is that an earlier version of UPKmodder required a trailing space even after the final hex character (if the final hex was directly followed by a '\\n' it would be treated as non-parsable). This was fixed in v0.70, by which point the Reference Update function had already been written and tested.
  So I think that what is happening is that the Reference Update code is assuming that each hex line will have at least one trailing space, which it overwrites. However, if the final hex is instead immediately followed by a '\\n' character then instead that is overwritten by a space, resulting in the loss of the newline.
  Definitely a glitch I've noticed as well, thought I forgot to add it to the issues list.

Q: Experiencing considerable slowdowns when highlighting long code lines; i.e. copying/pasting an entire code block from HxD as one long line.

A: no response as yet.

Q: Only projects which have been opened via "Open Project" are saved in project view (leftmost window). If you create a project and then close UPKModder, the new project will not be displayed after reopening it. But after you manually open the project and close UPKModder, it will be displayed after reopening UPKModder.

A: no response as yet.