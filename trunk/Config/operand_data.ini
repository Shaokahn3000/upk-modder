; operands and decode shape info
; Tables From UE Explorer(NativesTableList_UDK-2011-08.NTL) and UnHood (http://code.google.com/p/unhood/)
; # (e.g. 1 or 3) indicates number of tokens to skip
; R indicates a 4 byte reference
; G indicates a generic object
; N indicates indeterminate number of tokens until 00 token is seen
; P indicates indeterminate parameter list of generic objects until 16 token is seen
; C indicates a case statement
; J indicates a jump offset (2 bytes, relative to start of function)
; S0 indicates a context-type (0x12 or 0x19) relative skip (size of final G in context)
; S1 indicates an object-type skip relative offset (size of next single G object)
; S2 indicates a parameter-type relative skip (size of next G objects parsed until 0x16 read + 1 for 0x16 token)
; core operators
00 1 R 			; LocalVar ; local variable 
01 1 R 			; ClassVar ; class variable 
02 1 R 			; DefaultVar ; default variable 
04 1 G 			; Return ; return 
05 1 R 1 G 		; Switch ; switch statement 
06 1 J 			; Jump ; unconditional jump 
07 1 J G 		; JumpIfNot ; conditional jump
08 1 			; Stop ; stop 
09 1 G 			; Assert ; assert
0A 1 C 			; Case ; case
0B 1 			; None ; nothing non-op
0C 1 NR 8 NR 8	; LabelTable ; labeltable structure is unclear still
0D 1 G 			; GotoLabel ; gotolabel UNKNOWN STRUCTURE
0E 1 R G 		; EatReturnvalue ; EatReturnValue 
0F 1 G G 		; Let ; Let, assignment
10 1 G G 		; DynArrElem ; Dynamic array access -- index, array
11 1 G G G G G 	; New ; New operator -- uses 0B for omitted parameters
12 1 G S0 R 1 G ; ClassContext ; ClassContext
13 1 R G 		; MetaCast ; Metacast
14 1 G 			; Let(bool) ; Let, assignment for booleans
15 1			; EndOptionalParams ; end optional parameters
16 1 			; EndFunctParams ; end function parameters
17 1 			; Self ; self token
18 1 2			; Skip ; skip token
19 1 G S0 R 1 G ; ClassContext ; Context token
1A 1 G G 		; ArrElem ; static array access -- index, array
1B 1 NR 4 P 1 	; VirtualFunct ; virtual function
1C 1 R P 1 		; FinalFunct ; final function
1D 1 4 			; Constant(int4) ; integer constant
1E 1 4 			; Constant(float4) ; float constant
1F 1 N 	 		; Constant(string) ; string constant
20 1 R 			; Constant(object) ; object constant
21 1 NR 4 		; Constant(name) ; name constant 
22 1 4 4 4 		; Constant(rotator12) ;rotator constant 22 token then 3 4byte IEEE floats
23 1 4 4 4		; Constant(vector12) ; vector constant 23 token then 3 4byte IEEE floats
24 1 1 			; Constant(bytes) ; byte const
25 1 			; Constant(zero) ; int zero const
26 1 			; Constant(one) ; int 1 const
27 1 			; Constant(true) ; bool true const
28 1 			; Constant(false) ; bool false const
29 1 			; NativeParm ; NativeParm -- UNKNOWN STRUCTURE
2A 1 			; NoObject ; no object, used for null parameters
2C 1 1 			; Constant(int1) ; int constant
2D 1 G 			; BooleanVar ; boolean variable
2E 1 R G 		; DynClassCast ; dynamic class cast
2F 1 G J 		; Iterator ; Iterator (used mostly for special native functions)
30 1 			; IteratorPop ; iterator pop
31 1 			; IteratorNext ; iterator next
32 1 G G 		; StructCmpEq ; StructCmpEq -- UNCONFIRMED STRUCTURE
33 1 G G 		; StructCmpNe ; StructCmpNe -- UNCONFIRMED STRUCTURE
34 1 N 	 		; Constant(unicode) ; UnicodeStringConst -- UNCONFIRMED STRUCTURE -- NOT USED IN XCOM
35 1 R R 2 G 	; StructMember ; Struct member -- member reference, struct reference, variable 
36 1 G 			; DynArrLength ; Dynamic Array Length
37 1 G 			; GlobalFunct ; Global function -- UNCONFIRMED STRUCTURE
38 1 1 G 		; PrimitiveCast ; Primitive Cast
39 1 G G G 1 	; DynArrInsert ; Dynamic Array insert ; CAST EX_RotatorToVector = 0x39
3A 1 R 			; ReturnNothing ; Return Nothing  ;CAST EX_ByteToInt = 0x3A;  
; EX_EqualEqual_DelDel = 0x3B;
; EX_NotEqual_DelDel = 0x3C;
; EX_EqualEqual_DelFunc = 0x3D;  ; CAST EX_IntToByte = 0x3D
; EX_NotEqual_DelFunc = 0x3E;
; EX_EmptyDelegate = 0x3F;  ; CAST EX_IntToFloat = 0x3F
40 1 G G G 1 	; DynArrRemove ; Dynamic Array Remove
; EX_DebugInfo = 0x41;
; EX_DelegateFunction = 0x42;
43 1 NR 8		; Delegate ; EX_DelegateProperty = 0x43;
44 1 G			; LetDelegate ; EX_LetDelegate = 0x44;   ; CAST EX_FloatToInt = 0x44
45 1 G S1 G S1 G 	; Ternary ; Ternary conditional
46 1 G S2 G 1 	; DynArrFind ; Dynamic Array Find
; EX_DynArrayFindStruct = 0x47;
48 1 R 			; OutVar ; Local out variable
49 1 S2 G 1 	; DefaultParameter ; Default Parameter Value definition
4A 1 			; EmptyParamter ; Empty Parameter Value ; CAST EX_StringToInt = 0x4A
; EX_InstanceDelegate = 0x4B;
; EX_GoW_DefaultValue = 0x50;
; EX_InterfaceContext = 0x51;
; EX_InterfaceCast = 0x52;
53 1 			; EndOfScript ; End Of Script ; CAST EX_IntToString = 0x53
54 1 G G 1      ; DynArrAdd ; EX_DynArrayAdd = 0x54;
55 1 G S2 G 1 	; DynArrAddItem ; Dynamic Array Add Item  ; CAST EX_FloatToString = 0x55
56 1 G S2 G 1 	; DynArrRemoveItem ; Dynamic Array Remove Item
57 1 G S2 G G 1 ; DynArrInsertItem ; Dynamic Array Insert Item
58 1 G G 1 G J 	; DynArrIterator ; Dynamic Array Iterator -- foreach
; EX_ExtendedNative = 0x60;
61 2 P 1 		; ExtendedFunction ; call to extended native function
; EX_FirstNative = 0x70;

; built-in functions
81 1 G 1 		; ! (boolean) ;  ! unary NOT operator
F2 1 G G 1  	; == (boolean) ; == binary equality operator
F3 1 G G 1  	; != (boolean) ;!= binary inequality operator 
82 1 G 1 S2 G 1 	; && (boolean) ; && binary AND operator (with skip)
83 1 G 1 S2 G 1 	; ^^ (boolean) ; ^^ binary XOR operator (with skip)
84 1 G 1 S2 G 1 	; || (booelan) ; || binary OR operator (with skip)
85 1 G G 1 		; *= (unknown) ; *= binary operator 
C6 1 G G 1  	; *= (unknown) ; *= binary operator 
86 1 G G 1 		; /= (unknown) ; /= binary operator, 
87 1 G G 1  	; += (unknown) ; += binary operator, 
88 1 G G 1 		; -= (unknown) ; -= binar operator, 
89 1 G 1 		; ++ pre-increment (unknown) ; ++ unary pre-increment operator
8A 1 G 1 		; -- pre-increment (unknown) ; -- unary pre-decrement operator
8B 1 G 1 		; ++ post-increment (unknown) ; ++ unary post-increment operator
8C 1 G 1 		; -- post-increment (unknown) ;-- unary post-decrement operator
8D 1 G 1 		; ~ (boolean) ; ~ unary negation operator, boolean
8F 1 G 1 		; - negation (integer) ; - unary negation operator, integer
90 1 G G 1 		; * (integer) ; * binary operator, integer
91 1 G G 1 		; / (integer) ; / binary operator, integer
FD 1 G G 1 		; % (integer) ; % binary operator, integer
92 1 G G 1 		; + (integer) ; + binary operator, integer
93 1 G G 1 		; - subtact(integer) ; - binary operator, integer
94 1 G G 1 		; << (integer) ; << binary operator, integer
95 1 G G 1 		; >> (integer) ; >> binary operator, integer
C4 1 G G 1 		; <<< (integer) ; <<< binary operator, integer
96 1 G G 1 		; < (integer) ; < binary operator, integer
97 1 G G 1 		; > (integer) ; > binary operator, integer
98 1 G G 1 		; <= (integer) ; <= binary operator, integer
99 1 G G 1 		; >= (integer) ; >= binary operator, integer
9A 1 G G 1 		; == (integer) ; == binary operator, integer
9B 1 G G 1 		; != (integer) ; != binary operator, integer
9C 1 G G 1 		; & (integer) ; & binary operator, integer
9D 1 G G 1 		; ^ (integer) ; ^ binary operator, integer
9E 1 G G 1 		; | (integer) ; | binary operator, integer
9F 1 G G 1 		; *= (integer) ; *= binary operator, integer
A0 1 G G 1 		; /= (integer) ; /= binary operator, integer
A1 1 G G 1 		; += (integer) ; += binary operator, integer
A2 1 G G 1 		; -= (integer) ; -= binary operator, integer
A3 1 G 1 		; ++ pre-increment (integer) ; ++ unary pre-increment operator, integer
A4 1 G 1 		; -- pre-increment (integer) ; -- unary pre-decrement operator, integer
A5 1 G 1 		; ++ post-increment (integer) ; ++ unary post-increment operator, integer
A6 1 G 1 		; -- post-increment (integer) ; ++ unary post-decrement operator, integer
A7 1 G 1 		; Rand (integer) ; Rand unary operator, integer
F9 1 G G 1 		; Min (integer) ; Min binary operator, integer
FA 1 G G 1 		; Max (integer) ; Max binary operator, integer
FB 1 G G G 1 	; Clamp (integer) ; Clamp ternary operator, integer
A9 1 G G 1 		; - negate (float) ; - unary operator, float
AA 1 G G 1 		; ** (float) ; ** binary operator, float
AB 1 G G 1 		; * (float) ; * binary operator, float
AC 1 G G 1 		; / (float) ; / binary operator, float
AD 1 G G 1 		; % (float) ; % binary operator, float
AE 1 G G 1 		; + (float) ; + binary operator, float
AF 1 G G 1 		; - subtract (float) ; - binary operator, float
B0 1 G G 1 		; < (float) ; < binary operator, float
B1 1 G G 1 		; > (float) ; > binary operator, float
B2 1 G G 1 		; <= (float) ; <= binary operator, float
B3 1 G G 1 		; >= (float) ; >= binary operator, float
B4 1 G G 1 		; == (float) ; == binary operator, float
D2 1 G G 1 		; ~= (float) ; ~= binary operator, float
B5 1 G G 1 		; != (float) ; != binary operator, float
B6 1 G G 1 		; *= (float) ; *= binary operator, float
B7 1 G G 1 		; /= (float) ; /= binary operator, float
B8 1 G G 1 		; += (float) ; += binary operator, float
B9 1 G G 1 		; -= (float) ;-= binary operator, float
BA 1 G 1 		; Abs (float) ; Abs unary operator, float
BB 1 G 1 		; Sin (float) ; Sin unary operator, float
BC 1 G 1 		; Cos (float) ; Cos unary operator, float
BD 1 G 1 		; Tan (float) ; Tan unary operator, float
BE 1 G 1 		; Atan (float) ; Atan unary operator, float
BF 1 G 1 		; Exp (float) ; Exp unary operator, float
C0 1 G 1 		; Loge (float) ; Loge unary operator, float
C1 1 G 1 		; Sqrt (float) ; Sqrt unary operator, float
C2 1 G 1 		; Square (float) ; Square unary operator, float
C3 1 G 1 		; FRand (float) ; FRand unary operator, float
F4 1 G G 1 		; FMin (float) ; FMin binary operator, float
F5 1 G G 1 		; FMax (float) ; FMax binary operator, float
F6 1 G G G 1 	; FClamp (float) ; FClamp ternary operator, float
F7 1 G G G 1 	; Lerp (float) ; Lerp ternary operator, float
C7 1 G 1 		; Round (float) ; Round unary operator, float
D3 1 G G 1 		; - negate (vector) ; - unary operator, vector
D4 1 G G 1 		; * (vector) ; * binary operator, vector
D5 1 G G 1 		; * (vector) ; * binary operator, vector
; 28 1 G G 1 		; * binary operator, vector
D6 1 G G 1 		; * (vector) ; * binary operator, vector
D7 1 G G 1 		; + (vector) ; + binary operator, vector
D8 1 G G 1 		; - subtract (vector) ; - binary operator, vector
; 13 1 G G 1 		; << binary operator, vector
; 14 1 G G 1 		; >> binary operator, vector
D9 1 G G 1 		; == (vector) ; == binary operator, vector
DA 1 G G 1 		; != (vector) ; != binary operator, vector
DB 1 G G 1 		; Dot (vector) ; Dot binary operator, vector
DC 1 G G 1 		; Cross (vector) ; Cross binary operator, vector
DD 1 G G 1 		; *= (vector) ; *= binary operator, vector
; 29 1 G G 1 		; *= binary operator, vector
DE 1 G G 1 		; /= (vector) ; /= binary operator, vector
DF 1 G G 1 		; += (vector) ; += binary operator, vector
E0 1 G G 1 		; -= (vector) ; -= binary operator, vector
E1 1 G 1 		; VSize (vector) ; VSize unary operator, vector
E4 1 G 1 		; VSizeSq (vector) ; VSizeSq unary operator, vector
E2 1 G 1 		; Normal (vector) ; Normal unary operator, vector
FC 1 G 1 		; VRand (vector) ; VRand unary operator, vector
; 2C 1 G 1 		; MirrorVectorByNormal unary operator, vector
; DC 1 G 1 		; ProjectOnTo unary operator, vector
; DD 1 G 1 		; IsZero unary operator, vector
8E 1 G G 1 		; == (unknown) ; == binary operator,
CB 1 G G 1 		; != (unknown) ; != binary operator,
; 1F 1 G G 1 		; * binary operator,
; 20 1 G G 1 		; * binary operator,
; 21 1 G G 1 		; / binary operator,
; 22 1 G G 1 		; *= binary operator,
; 23 1 G G 1 		; /= binary operator,
; 3C 1 G G 1 		; + binary operator,
; 3D 1 G G 1 		; - binary operator,
; 3E 1 G G 1 		; += binary operator,
; 3F 1 G G 1 		; -= binary operator,
E5 1 G G G G 1 	; GetAxes ; GetAxes quaternary operator
E6 1 G G G G 1 	; GetUnaxes ; GetUnAxes quaternary operator
; 40 1 G 1 		; RotRand unary operator
70 1 G G 1 		; $ (string) ; $ binary operator, string
A8 1 G G 1 		; @ (string) ;  @ binary operator, string
73 1 G G 1 		; < (string) ;  < binary operator, string
74 1 G G 1 		; > (string) ;  > binary operator, string
78 1 G G 1 		; <= (string) ;  <= binary operator, string
79 1 G G 1 		; >= (string) ;  >= binary operator, string
7A 1 G G 1 		; == (string) ;  == binary operator, string
7B 1 G G 1 		; != (string) ;  != binary operator, string
7C 1 G G 1 		; ~= (string) ;  ~= binary operator, string
42 1 G G 1 		; $= (string) ;  $= binary operator, string
;43 1 G G 1 		; @= (string) ;  @= binary operator, string
;44 1 G G 1 		; -= (string) ;  -= binary operator, string
7D 1 G 1 		; Len (string) ;  Len unary operator, string
7E 1 G G G 1 	; InStr (string) ;  InStr ternary operator, string
7F 1 G G G 1 	; Mid (string) ;  Mid ternary operator, string 
80 1 G G 1 		; Left (string) ;  Left binary operator, string
EA 1 G G 1 		; Right (string) ;  Right binary operator, string
EB 1 G 1 		; Caps (string) ;  Caps unary operator, string
EE 1 G 1 		; Locs (string) ;  Locs unary operator, string
EC 1 G 1 		; Chr (string) ;  Chr unary operator, string
ED 1 G 1 		; Asc (string) ;  Asc unary operator, string
C9 1 G G G G 1 	; ReplQuaternary ;  Repl quaternary operator
72 1 G G 1 		; == (class) ; == binary class comparison operator
77 1 G G 1 		; != (class) ;!= binary class comparison operator
; 02 1 G G 1 		; ClassIsChildOf binary operator
C5 1 G 1 		; IsA (class) ; IsA unary operator
FE 1 G G 1 		; == (unknown) ; == binary operator
FF 1 G G 1 		; != (unknown) ;  != binary operator
; 0E 1 G G 1 		; + binary operator
; 0F 1 G G 1 		; - binary operator
E7 1 G G 1 		; LogInternal ; LogInternal binary operator
E8 1 G 1 		; WarnInternal ; WarnInternal unary operator
71 1 G 1 		; GotoState ; GotoState unary operator
; begin native functions that require special preceding code
; 19 1 G 1 		; IsInState unary operator
; 1C 2 			; GetStateName zero-parm operator
; Enable	75
; Disable	76
; SaveConfig	18
; Sleep	00
; FinishAnim	05
; SetCollision	06
; SetCollisionSize	1B
; Move	0A
; SetLocation	0B
; SetRotation	2B
; MoveSmooth	81
; AutonomousPhysics	83
; SetBase	2A
; SetOwner	10
; SetPhysics	82
; Trace	15
; FastTrace	24
; Destroy	17
; SetTimer	18
; MakeNoise	00
; PlayerCanSeeMe	14
; GetURLMap	23
; AllActors	30
; DynamicActors	39
; ChildActors	31
; BasedActors	32
; TouchingActors	33
; TraceActors	35
; VisibleActors	37
; VisibleCollidingActors	38
; CollidingActors	41
; LineOfSightTo	02
; CanSee	15
; CanSeeByPoints	19
; PickTarget	13
; MoveTo	F4
; MoveToward	F6
; FinishRotation	FC
; FindPathTo	06
; FindPathToward	05
; FindRandomDest	0D
; PointReachable	09
; ActorReachable	08
; PickWallAdjust	0E
; WaitForLanding	0F
; UpdateURL	22
; FindStairRotation	0C
; IsSeatControllerReplicationViewer	E7
